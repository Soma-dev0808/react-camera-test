{"version":3,"sources":["logo.svg","serviceWorker.js","DropZone/DragImageTest.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","thumbsContainer","flexWrap","marginTop","thumb","border","marginBottom","marginRight","width","height","boxSizing","thumbInner","minWidth","overflow","img","StyledDropzone","props","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","concat","map","file","isMobile","EXIF","getData","orientation","exifdata","Orientation","canvas","document","createElement","ctx","getContext","thisImage","Image","onload","save","styleWidth","style","styleHeight","translate","scale","rotate","Math","PI","drawImage","restore","dataURL","toDataURL","tempImage","preview","uploadToS3","src","URL","createObjectURL","Object","assign","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","thumbs","key","name","useEffect","console","log","length","forEach","revokeObjectURL","filepath","path","size","className","type","DragImageTest","alert","JSON","stringify","contentType","options","params","Key","ContentType","headers","axios","get","then","res","putURL","data","put","catch","err","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.06ab8684.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { isMobile } from \"react-device-detect\"\r\nimport EXIF from \"exif-js\"\r\nimport axios from 'axios';\r\n\r\nfunction DragImageTest() {\r\n  return (\r\n    <div>\r\n      <StyledDropzone />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst thumbsContainer = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  marginTop: 16,\r\n};\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 200,\r\n  height: 200,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nfunction StyledDropzone(props) {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop: (acceptedFiles) => {\r\n      setFiles(\r\n        files.concat(\r\n          acceptedFiles.map((file) => \r\n          {\r\n            if(isMobile) {\r\n              EXIF.getData(file, function() {\r\n                const orientation = file.exifdata.Orientation\r\n                let canvas = document.createElement(\"canvas\")\r\n                let ctx = canvas.getContext(\"2d\")\r\n  \r\n                var thisImage = new Image;\r\n  \r\n                thisImage.onload = function() {\r\n                  canvas.width  = thisImage.width;\r\n                  canvas.height = thisImage.height;\r\n                  ctx.save();\r\n                  var width  = canvas.width;  \r\n                  var styleWidth = canvas.style.width;\r\n                  var height = canvas.height; \r\n                  var styleHeight = canvas.style.height;\r\n  \r\n                  if (orientation) {\r\n                    if (orientation > 4) {\r\n                      canvas.width = height; \r\n                      canvas.style.width = styleHeight;\r\n                      canvas.height = width;  \r\n                      canvas.style.height = styleWidth;\r\n                    }\r\n                    switch (orientation) {\r\n                    case 2: ctx.translate(width, 0);     ctx.scale(-1,1); break;\r\n                    case 3: ctx.translate(width,height); ctx.rotate(Math.PI); break;\r\n                    case 4: ctx.translate(0,height);     ctx.scale(1,-1); break;\r\n                    case 5: ctx.rotate(0.5 * Math.PI);   ctx.scale(1,-1); break;\r\n                    case 6: ctx.rotate(0.5 * Math.PI);   ctx.translate(0,-height); break;\r\n                    case 7: ctx.rotate(0.5 * Math.PI);   ctx.translate(width,-height); ctx.scale(-1,1); break;\r\n                    case 8: ctx.rotate(-0.5 * Math.PI);  ctx.translate(-width,0); break;\r\n                    }\r\n                  }\r\n                  ctx.drawImage(thisImage,0,0);\r\n                  ctx.restore();\r\n                  var dataURL = canvas.toDataURL();\r\n  \r\n                  let tempImage = file\r\n                  tempImage.preview = dataURL\r\n                  uploadToS3(tempImage)\r\n                }\r\n  \r\n                thisImage.src = URL.createObjectURL(file)\r\n              })\r\n            }\r\n\r\n            return Object.assign(file, {\r\n              preview: URL.createObjectURL(file),\r\n            })\r\n          }\r\n          )\r\n        )\r\n      );\r\n    },\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const thumbs = files.map((file) => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img src={file.preview} style={img} />\r\n      </div>\r\n    </div>\r\n  ));      \r\n\r\n  useEffect(()  => {\r\n    console.log(files)\r\n      if(files.length > 0) {\r\n        uploadToS3(files[0])\r\n      }\r\n    },\r\n    [files]\r\n  );\r\n\r\n  useEffect(\r\n    () => () => {\r\n      console.log(files);\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files]\r\n  );\r\n\r\n  const filepath = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div {...getRootProps({ style })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n        <button type=\"button\">Open File Dialog</button>\r\n      </div>\r\n      <aside>\r\n        <h4>Files</h4>\r\n        <ul>{filepath}</ul>\r\n      </aside>\r\n      <aside style={thumbsContainer}>{thumbs}</aside>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DragImageTest;\r\n\r\n\r\nexport function uploadToS3(file) {\r\n\r\n  console.log(file)\r\n  alert(JSON.stringify(file))\r\n\r\n    const contentType = file.type; // eg. image/jpeg or image/svg+xml\r\n  \r\n    const generatePutUrl = 'http://localhost:3500/generate-put-url';\r\n    const options = {\r\n      params: {\r\n        Key: file.name,\r\n        ContentType: contentType\r\n      },\r\n      headers: {\r\n        'Content-Type': contentType\r\n      }\r\n    };\r\n  \r\n    axios.get(generatePutUrl, options).then(res => {\r\n      const {\r\n        data: { putURL }\r\n      } = res;\r\n      axios\r\n        .put(putURL, file, options)\r\n        .then(res => {\r\n          console.log(res)\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n        });\r\n    })\r\n    .catch(err => alert(JSON.stringify(err, null, 10)))\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DragImageTest from \"./DropZone/DragImageTest\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <DragImageTest />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}